import {
  ActionRowBuilder,
  type BaseMessageOptions,
  ButtonBuilder,
  ButtonStyle,
  ChannelSelectMenuBuilder,
  ChannelType,
  Colors,
  RoleSelectMenuBuilder,
  StringSelectMenuBuilder,
} from 'discord.js';
import { generateEmbed, sendErrorMessage } from '#utils/embed';
import { isNullOrUndefinedOrEmpty, range } from '@sapphire/utilities';
import { ApplyOptions } from '@sapphire/decorators';
import BumpBot from '#models/BumpBot';
import { Duration } from '@sapphire/duration';
import { MessageLinkRegex } from '@sapphire/discord.js-utilities';
import Settings from '#models/Settings';
import { Subcommand } from '@sapphire/plugin-subcommands';
import { reFormatDuration } from '#utils/util';

@ApplyOptions<Subcommand.Options>({
  description: 'Settings',
  subcommands: [
    {
      name: 'birthday',
      chatInputRun: 'birthdaySettings',
    },
    {
      name: 'bump',
      type: 'group',
      entries: [{ name: 'general', chatInputRun: 'generalBumpSettings' }],
    },
    {
      name: 'bump_bots',
      type: 'group',
      entries: [
        { name: 'add', chatInputRun: 'addBumpBot' },
        { name: 'edit', chatInputRun: 'editBumpBot' },
        { name: 'delete', chatInputRun: 'deleteBumpBot' },
      ],
    },
  ],
})
export class SettingsCommand extends Subcommand {
  public override registerApplicationCommands(registry: Subcommand.Registry) {
    registry.registerChatInputCommand(builder =>
      builder
        .setName(this.name)
        .setDescription(this.description)
        .setDefaultMemberPermissions(8n)
        .addSubcommand(subCommand =>
          subCommand
            .setName('birthday')
            .setDescription('–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å –∑ –¥–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è')
            .addStringOption(option =>
              option
                .setName('–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')
                .setDescription('–û–±–µ—Ä—ñ—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')
                .setRequired(true)
                .setChoices(
                  { name: '–ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω—å', value: 'notifyChannelId' },
                  { name: '–†–æ–ª—ñ –¥–ª—è —ñ–º–µ–Ω–∏–Ω–Ω–∏–∫—ñ–≤', value: 'roleIds' },
                  { name: '–ì–æ–¥–∏–Ω–∞ —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è', value: 'hour' },
                ),
            ),
        )
        .addSubcommandGroup(group =>
          group
            .setName('bump')
            .setDescription('–ó–º—ñ–Ω–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –±–∞–º–ø–∏')
            .addSubcommand(subCommand =>
              subCommand
                .setName('general')
                .setDescription('–ó–º—ñ–Ω–∏—Ç–∏ –∑–∞–≥–∞–ª—å–Ω—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –±–∞–º–ø–∏')
                .addStringOption(option =>
                  option
                    .setName('–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')
                    .setDescription('–û–±–µ—Ä—ñ—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è')
                    .setChoices(
                      { name: '–ö–∞–Ω–∞–ª –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è', value: 'notifyChannelId' },
                      { name: '–†–æ–ª—ñ –¥–ª—è –∑–≥–∞–¥—É–≤–∞–Ω–Ω—è', value: 'mentionRoleIds' },
                    )
                    .setRequired(true),
                ),
            ),
        )
        .addSubcommandGroup(group =>
          group
            .setName('bump_bots')
            .setDescription('–ó–º—ñ–Ω–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç—ñ–≤ –±–∞–º–ø—ñ–≤')
            .addSubcommand(subCommand =>
              subCommand
                .setName('add')
                .setDescription('–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å –±–æ—Ç–∞ –±–∞–º–ø—ñ–≤')
                .addUserOption(option => option.setName('–±–æ—Ç').setDescription('–ó–≥–∞–¥—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞').setRequired(true))
                .addStringOption(option => option.setName('–ø—Ä–æ–º—ñ–∂–æ–∫').setDescription('–ü—Ä–æ–º—ñ–∂–æ–∫ –º—ñ–∂ –±–∞–º–ø–∞–º–∏ (30m/3h)').setRequired(true))
                .addStringOption(option => option.setName('–∫–æ–º–∞–Ω–¥–∞').setDescription('–Ø–∫—É –Ω–∞–∑–≤—É –º–∞—î –∫–æ–º–∞–Ω–¥–∞ –±–∞–º–ø—É?').setRequired(true))
                .addStringOption(option =>
                  option.setName('–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è').setDescription('–ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –±–∞–º–ø—É').setRequired(true),
                ),
            )
            .addSubcommand(subCommand =>
              subCommand
                .setName('edit')
                .setDescription('–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å –±–æ—Ç–∞ –±–∞–º–ø—ñ–≤')
                .addStringOption(option => option.setName('–±–æ—Ç').setDescription('–ë–æ—Ç –±–∞–º–ø—É').setRequired(true).setAutocomplete(true)),
            )
            .addSubcommand(subCommand =>
              subCommand
                .setName('delete')
                .setDescription('–í–∏–¥–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Å –±–æ—Ç–∞ –±–∞–º–ø—ñ–≤')
                .addStringOption(option => option.setName('–±–æ—Ç').setDescription('–ë–æ—Ç –±–∞–º–ø—É').setRequired(true).setAutocomplete(true)),
            ),
        ),
    );
  }

  public async generalBumpSettings(ctx: Subcommand.ChatInputCommandInteraction<'cached'>) {
    const check = await this.checkPerms(ctx);
    if (!check) return;

    const setting = ctx.options.getString('–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', true);
    const options: BaseMessageOptions = {};

    let settings = await Settings.findOne({ guildId: ctx.guildId }).lean();
    if (!settings) settings = await Settings.create({ guildId: ctx.guildId });

    if (setting === 'notifyChannelId') {
      const channelSelectMenu = new ChannelSelectMenuBuilder({
        custom_id: `settings_bumps_${setting}`,
        placeholder: '–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª',
        channel_types: [ChannelType.GuildText],
        min_values: 0,
        max_values: 1,
      });

      if (!isNullOrUndefinedOrEmpty(settings.bumps.notifyChannelId)) {
        channelSelectMenu.setDefaultChannels(settings.bumps.notifyChannelId);
      }

      options.embeds = [
        generateEmbed({
          color: Colors.DarkVividPink,
          title: '#Ô∏è‚É£ | –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è',
          description: '–í —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µ –æ–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –≤ —è–∫–∏–π –±—É–¥—É—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏—Å—å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –±–∞–º–ø–∏.',
        }),
      ];
      options.components = [new ActionRowBuilder<ChannelSelectMenuBuilder>({ components: [channelSelectMenu] })];
    } else {
      options.embeds = [
        generateEmbed({
          color: Colors.DarkVividPink,
          title: 'üë• | –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–ª–µ–π –¥–ª—è –∑–≥–∞–¥—É–≤–∞–Ω–Ω—è',
          description: '–í —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µ –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—ñ —è–∫—ñ –±—É–¥—É—Ç—å –∑–≥–∞–¥—É–≤–∞—Ç–∏—Å—å –ø—ñ–¥ —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –±–∞–º–ø–∏.',
        }),
      ];
      options.components = [
        new ActionRowBuilder<RoleSelectMenuBuilder>({
          components: [
            new RoleSelectMenuBuilder({
              custom_id: `settings_bumps_${setting}`,
              placeholder: '–û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—ñ',
              min_values: 0,
              max_values: 25,
            }).setDefaultRoles(...settings.bumps.mentionRoleIds),
          ],
        }),
      ];
    }

    await ctx.reply({ ...options, ephemeral: true });
  }

  public async addBumpBot(ctx: Subcommand.ChatInputCommandInteraction<'cached'>) {
    const check = await this.checkPerms(ctx);
    if (!check) return;

    const userBot = ctx.options.getUser('–±–æ—Ç', true);
    const rawTime = ctx.options.getString('–ø—Ä–æ–º—ñ–∂–æ–∫', true);
    const cmdName = ctx.options.getString('–∫–æ–º–∞–Ω–¥–∞', true).replace('/', '');
    const msgUrlRaw = ctx.options.getString('–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è', true);
    const msgUrl = MessageLinkRegex.exec(msgUrlRaw);

    const time = new Duration(rawTime);

    if (!userBot.bot) {
      await sendErrorMessage({ ctx, content: '–í–∫–∞–∑–∞–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–µ —î –±–æ—Ç–æ–º.' });
      return;
    } else if (!time.offset) {
      await sendErrorMessage({ ctx, content: '–í–∫–∞–∂—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —á–∞—Å (30m/3h/5h).' });
      return;
    } else if (!MessageLinkRegex.test(msgUrlRaw) || !msgUrl?.groups) {
      await sendErrorMessage({ ctx, content: '–í–∫–∞–∂—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.' });
      return;
    } else if (!('channelId' in msgUrl?.groups) || !('messageId' in msgUrl?.groups)) {
      await sendErrorMessage({ ctx, content: '–í–∫–∞–∂—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.' });
      return;
    }

    const channel = ctx.guild.channels.cache.get(msgUrl.groups.channelId);
    if (!channel?.isTextBased()) {
      await sendErrorMessage({ ctx, content: '–í–∫–∞–∑–∞–Ω–∏–π –∫–∞–Ω–∞–ª –Ω–µ —î —Ç–µ–∫—Å—Ç–æ–≤–∏–º.' });
      return;
    }

    const msg = await channel.messages.fetch(msgUrl.groups.messageId);
    if (!msg) {
      await sendErrorMessage({ ctx, content: '–í–∫–∞–∑–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.' });
      return;
    } else if (msg.author.id !== userBot.id) {
      await sendErrorMessage({ ctx, content: '–í–∫–∞–∑–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ —î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º –≤—ñ–¥ –±–æ—Ç–∞.' });
      return;
    } else if (!msg.embeds[0]?.hexColor) {
      await sendErrorMessage({ ctx, content: '–í–∫–∞–∑–∞–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –º—ñ—Å—Ç–∏—Ç—å –∫–æ–ª—å–æ—Ä—É.' });
      return;
    }

    await BumpBot.findOneAndUpdate(
      { guildId: ctx.guildId, botId: userBot.id },
      { cmdName, cooldown: time.offset, successColor: msg.embeds[0].hexColor },
      { upsert: true },
    );

    await ctx.reply({
      embeds: [
        generateEmbed({
          color: Colors.Green,
          title: '‚úÖ | –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ',
          description: `–î–∞–Ω—ñ –ø—Ä–æ –±–æ—Ç–∞ –¥–ª—è –±–∞–º–ø—ñ–≤ –±—É–ª–∏ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω—ñ.`,
        }),
      ],
      ephemeral: true,
    });
  }

  public async editBumpBot(ctx: Subcommand.ChatInputCommandInteraction<'cached'>) {
    const check = await this.checkPerms(ctx);
    if (!check) return;

    const botId = ctx.options.getString('–±–æ—Ç', true);
    const bot = await ctx.guild.members.fetch(botId).catch(() => null);
    if (!bot) {
      await sendErrorMessage({ ctx, content: '–í–∫–∞–∑–∞–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.' });
      return;
    }

    const botBump = await BumpBot.findOne({ guildId: ctx.guildId, botId }).lean();
    if (!botBump) {
      await sendErrorMessage({ ctx, content: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –±–æ—Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ.' });
      return;
    }

    await ctx.reply({
      embeds: [
        generateEmbed({
          title: 'ü§ñ | –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞',
          color: bot.displayColor,
          description: `–ë–æ—Ç: ${bot}\n–ö–æ–º–∞–Ω–¥–∞: /${botBump.cmdName}\n–ü—Ä–æ–º—ñ–∂–æ–∫ –º—ñ–∂ –±–∞–º–ø–∞–º–∏: ${reFormatDuration(botBump.cooldown)}\n–ö–æ–ª—ñ—Ä —É—Å–ø—ñ—Ö—É: ${botBump.successColor}`,
        }),
      ],
      components: [
        new ActionRowBuilder<StringSelectMenuBuilder>({
          components: [
            new StringSelectMenuBuilder({
              custom_id: `bot_settings_${botId}`,
              placeholder: '–û–±–µ—Ä—ñ—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è',
              options: [
                { label: '–ó–º—ñ–Ω–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É', value: 'change_cmd' },
                { label: '–ó–º—ñ–Ω–∏—Ç–∏ –ø—Ä–æ–º—ñ–∂–æ–∫', value: 'change_cooldown', description: '–ü—Ä–æ–º—ñ–∂–æ–∫ –º—ñ–∂ –±–∞–º–ø–∞–º–∏ (1h/1m/1s)' },
                { label: '–ó–º—ñ–Ω–∏—Ç–∏ –∫–æ–ª—ñ—Ä', value: 'change_color', description: '–ö–æ–ª—ñ—Ä —É—Å–ø—ñ—à–Ω–æ–≥–æ –±–∞–º–ø—É' },
              ],
            }),
          ],
        }),
      ],
      ephemeral: true,
    });
  }

  public async deleteBumpBot(ctx: Subcommand.ChatInputCommandInteraction<'cached'>) {
    const check = await this.checkPerms(ctx);
    if (!check) return;

    const botId = ctx.options.getString('–±–æ—Ç', true);

    const bot = await ctx.guild.members.fetch(botId).catch(() => null);
    if (!bot) {
      await sendErrorMessage({ ctx, content: '–í–∫–∞–∑–∞–Ω–æ–≥–æ –±–æ—Ç–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ.' });
      return;
    }

    const botBump = await BumpBot.findOne({ guildId: ctx.guildId, botId }).lean();
    if (!botBump) {
      await sendErrorMessage({ ctx, content: '–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ –±–æ—Ç–∞ –≤—ñ–¥—Å—É—Ç–Ω—ñ.' });
      return;
    }

    await ctx.reply({
      embeds: [
        generateEmbed({
          title: 'ü§ñ | –í–∏–¥–∞–ª–µ–Ω–Ω—è –±–æ—Ç–∞',
          color: bot.displayColor,
          description: `–í–∏ –¥—ñ–π—Å–Ω–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–∞–º–ø—ñ–≤ –¥–ª—è –±–æ—Ç–∞ ${bot}?`,
        }),
      ],
      components: [
        new ActionRowBuilder<ButtonBuilder>({
          components: [
            new ButtonBuilder({
              custom_id: `bot_delete_confirm_${botId}`,
              emoji: 'üóëÔ∏è',
              label: '–í–∏–¥–∞–ª–∏—Ç–∏',
              style: ButtonStyle.Danger,
            }),
            new ButtonBuilder({
              custom_id: `bot_delete_cancel_${botId}`,
              emoji: '‚ùå',
              label: '–°–∫–∞—Å—É–≤–∞—Ç–∏',
              style: ButtonStyle.Secondary,
            }),
          ],
        }),
      ],
      ephemeral: true,
    });
  }

  public async birthdaySettings(ctx: Subcommand.ChatInputCommandInteraction<'cached'>) {
    const check = await this.checkPerms(ctx);
    if (!check) return;

    const setting = ctx.options.getString('–Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è', true);
    const options: BaseMessageOptions = {};

    let settings = await Settings.findOne({ guildId: ctx.guildId }).lean();
    if (!settings) settings = await Settings.create({ guildId: ctx.guildId });

    if (setting === 'notifyChannelId') {
      const channelSelectMenu = new ChannelSelectMenuBuilder({
        custom_id: `settings_birthdays_${setting}`,
        placeholder: '–û–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª',
        channel_types: [ChannelType.GuildText],
        min_values: 0,
        max_values: 1,
      });

      if (!isNullOrUndefinedOrEmpty(settings.birthdays.notifyChannelId)) {
        channelSelectMenu.setDefaultChannels(settings.bumps.notifyChannelId);
      }

      options.embeds = [
        generateEmbed({
          color: Colors.DarkVividPink,
          title: '#Ô∏è‚É£ | –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–∞–Ω–∞–ª—É –¥–ª—è –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è',
          description: '–í —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µ –æ–±–µ—Ä—ñ—Ç—å –∫–∞–Ω–∞–ª –≤ —è–∫–∏–π –±—É–¥—É—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏—Å—å –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ –¥–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.',
        }),
      ];
      options.components = [new ActionRowBuilder<ChannelSelectMenuBuilder>({ components: [channelSelectMenu] })];
    } else if (setting === 'roleIds') {
      options.embeds = [
        generateEmbed({
          color: Colors.DarkVividPink,
          title: 'üë• | –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–ª–µ–π –¥–ª—è —ñ–º–µ–Ω–∏–Ω–Ω–∏–∫—ñ–≤',
          description: '–í —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µ –æ–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—ñ —è–∫—ñ —Ç–∏–º—á–∞—Å–æ–≤–æ –±—É–¥—É—Ç—å –Ω–∞–¥–∞–≤–∞—Ç–∏—Å—å —ñ–º–µ–Ω–∏–Ω–Ω–∏–∫–∞–º.',
        }),
      ];
      options.components = [
        new ActionRowBuilder<RoleSelectMenuBuilder>({
          components: [
            new RoleSelectMenuBuilder({
              custom_id: `settings_birthdays_${setting}`,
              placeholder: '–û–±–µ—Ä—ñ—Ç—å —Ä–æ–ª—ñ',
              min_values: 0,
              max_values: 25,
            }).setDefaultRoles(...settings.birthdays.roleIds),
          ],
        }),
      ];
    } else {
      options.embeds = [
        generateEmbed({
          color: Colors.DarkVividPink,
          title: '‚åö | –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –≥–æ–¥–∏–Ω–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è',
          description: '–í —Å–ø–∏—Å–∫—É –Ω–∏–∂—á–µ –æ–±–µ—Ä—ñ—Ç—å –≥–æ–¥–∏–Ω—É –≤ —è–∫—É –±—É–¥—É—Ç—å –Ω–∞–¥—Å–∏–ª–∞—Ç–∏—Å—å –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑ –¥–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è.',
        }),
      ];
      options.components = [
        new ActionRowBuilder<RoleSelectMenuBuilder>({
          components: [
            new StringSelectMenuBuilder({
              custom_id: `settings_birthdays_${setting}`,
              placeholder: '–û–±–µ—Ä—ñ—Ç—å –≥–æ–¥–∏–Ω—É',
              min_values: 1,
              max_values: 1,
              options: range(0, 23, 1).map(hour => ({
                label: `${hour} –≥–æ–¥–∏–Ω–∞`,
                value: `${hour}`,
                default: hour === settings.birthdays.hour,
              })),
            }),
          ],
        }),
      ];
    }

    await ctx.reply({ ...options, ephemeral: true });
  }

  private async checkPerms(ctx: Subcommand.ChatInputCommandInteraction<'cached'>) {
    if (!ctx.memberPermissions.has(8n)) {
      await sendErrorMessage({
        ctx,
        content: '–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø—Ä–∞–≤ –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–æ–º–∞–Ω–¥–∏.',
      });
      return false;
    }

    return true;
  }
}
